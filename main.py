# main.py

import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from keep_alive import keep_alive

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# üîÅ –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô –Æ–ó–ï–†–ù–ï–ô–ú –í–ê–®–ï–ì–û –ë–û–¢–ê (–±–µ–∑ @)
BOT_USERNAME = "SalRuz_bot"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—à—å —É–ø–æ–º—è–Ω—É—Ç—å –º–µ–Ω—è –≤ —á–∞—Ç–µ ‚Äî —è –æ—Ç–≤–µ—á—É!')

async def handle_mention(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    text = message.text or ""

    if f"@{BOT_USERNAME}" in text:
        await message.reply_text("–ü—Ä–∏–≤–µ—Ç!")

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–Ø –∂–∏–≤–æ–π –∏ —Ä–∞–±–æ—Ç–∞—é! ü§ñ")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

def main() -> None:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv("BOT_TOKEN")

    # üîç –û–¢–õ–ê–î–ö–ê: –ü–µ—á–∞—Ç–∞–µ–º —Ç–æ–∫–µ–Ω (–≤ –ª–æ–≥–∞—Ö Render –≤—ã —É–≤–∏–¥–∏—Ç–µ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ)
    print(f"DEBUG: TOKEN = '{TOKEN}'")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ None ‚Äî –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –∏ –≤—ã—Ö–æ–¥–∏–º
    if not TOKEN or TOKEN.strip() == "":
        print("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –≤ Render.")
        print("‚ÑπÔ∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("   - –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ—á–Ω–æ: BOT_TOKEN")
        print("   - –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑ @BotFather")
        print("   - –í—ã –Ω–∞–∂–∞–ª–∏ 'Save, rebuild and deploy' –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å InvalidToken

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("ping", ping))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_mention))
    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª
    main()
